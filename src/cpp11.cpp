// Generated by cpp11: do not edit by hand
// clang-format off

#include "flowWorkspace_types.h"
#include "cpp11/declarations.hpp"
#include <R_ext/Visibility.h>

// cytoframeAPI.cpp
void del_rownames(cpp11::external_pointer<CytoFrameView> fr);
extern "C" SEXP _flowWorkspace_del_rownames(SEXP fr) {
  BEGIN_CPP11
    del_rownames(cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<CytoFrameView>>>(fr));
    return R_NilValue;
  END_CPP11
}
// cytoframeAPI.cpp
void set_rownames(cpp11::external_pointer<CytoFrameView> fr, vector<string> val);
extern "C" SEXP _flowWorkspace_set_rownames(SEXP fr, SEXP val) {
  BEGIN_CPP11
    set_rownames(cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<CytoFrameView>>>(fr), cpp11::as_cpp<cpp11::decay_t<vector<string>>>(val));
    return R_NilValue;
  END_CPP11
}
// cytoframeAPI.cpp
vector<string> get_rownames(cpp11::external_pointer<CytoFrameView> fr);
extern "C" SEXP _flowWorkspace_get_rownames(SEXP fr) {
  BEGIN_CPP11
    return cpp11::as_sexp(get_rownames(cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<CytoFrameView>>>(fr)));
  END_CPP11
}
// cytoframeAPI.cpp
string backend_type(cpp11::external_pointer<CytoFrameView> fr);
extern "C" SEXP _flowWorkspace_backend_type(SEXP fr) {
  BEGIN_CPP11
    return cpp11::as_sexp(backend_type(cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<CytoFrameView>>>(fr)));
  END_CPP11
}
// cytoframeAPI.cpp
bool cf_is_indexed(cpp11::external_pointer<CytoFrameView> fr);
extern "C" SEXP _flowWorkspace_cf_is_indexed(SEXP fr) {
  BEGIN_CPP11
    return cpp11::as_sexp(cf_is_indexed(cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<CytoFrameView>>>(fr)));
  END_CPP11
}
// cytoframeAPI.cpp
void cf_scale_time_channel_cpp(cpp11::external_pointer<CytoFrameView> fr);
extern "C" SEXP _flowWorkspace_cf_scale_time_channel_cpp(SEXP fr) {
  BEGIN_CPP11
    cf_scale_time_channel_cpp(cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<CytoFrameView>>>(fr));
    return R_NilValue;
  END_CPP11
}
// cytoframeAPI.cpp
void cf_set_readonly(cpp11::external_pointer<CytoFrameView> fr, bool flag);
extern "C" SEXP _flowWorkspace_cf_set_readonly(SEXP fr, SEXP flag) {
  BEGIN_CPP11
    cf_set_readonly(cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<CytoFrameView>>>(fr), cpp11::as_cpp<cpp11::decay_t<bool>>(flag));
    return R_NilValue;
  END_CPP11
}
// cytoframeAPI.cpp
void cf_flush_meta_cpp(cpp11::external_pointer<CytoFrameView> fr);
extern "C" SEXP _flowWorkspace_cf_flush_meta_cpp(SEXP fr) {
  BEGIN_CPP11
    cf_flush_meta_cpp(cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<CytoFrameView>>>(fr));
    return R_NilValue;
  END_CPP11
}
// cytoframeAPI.cpp
void cf_load_meta_cpp(cpp11::external_pointer<CytoFrameView> fr);
extern "C" SEXP _flowWorkspace_cf_load_meta_cpp(SEXP fr) {
  BEGIN_CPP11
    cf_load_meta_cpp(cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<CytoFrameView>>>(fr));
    return R_NilValue;
  END_CPP11
}
// cytoframeAPI.cpp
string get_uri(cpp11::external_pointer<CytoFrameView> fr);
extern "C" SEXP _flowWorkspace_get_uri(SEXP fr) {
  BEGIN_CPP11
    return cpp11::as_sexp(get_uri(cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<CytoFrameView>>>(fr)));
  END_CPP11
}
// cytoframeAPI.cpp
cpp11::external_pointer<CytoFrameView> realize_view_cytoframe(cpp11::external_pointer<CytoFrameView> fr, string filename);
extern "C" SEXP _flowWorkspace_realize_view_cytoframe(SEXP fr, SEXP filename) {
  BEGIN_CPP11
    return cpp11::as_sexp(realize_view_cytoframe(cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<CytoFrameView>>>(fr), cpp11::as_cpp<cpp11::decay_t<string>>(filename)));
  END_CPP11
}
// cytoframeAPI.cpp
cpp11::external_pointer<CytoFrameView> copy_view_cytoframe(cpp11::external_pointer<CytoFrameView> fr);
extern "C" SEXP _flowWorkspace_copy_view_cytoframe(SEXP fr) {
  BEGIN_CPP11
    return cpp11::as_sexp(copy_view_cytoframe(cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<CytoFrameView>>>(fr)));
  END_CPP11
}
// cytoframeAPI.cpp
void subset_cytoframe_by_rows(cpp11::external_pointer<CytoFrameView> fr, vector<int> idx);
extern "C" SEXP _flowWorkspace_subset_cytoframe_by_rows(SEXP fr, SEXP idx) {
  BEGIN_CPP11
    subset_cytoframe_by_rows(cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<CytoFrameView>>>(fr), cpp11::as_cpp<cpp11::decay_t<vector<int>>>(idx));
    return R_NilValue;
  END_CPP11
}
// cytoframeAPI.cpp
void subset_cytoframe_by_cols(cpp11::external_pointer<CytoFrameView> fr, vector<int> idx);
extern "C" SEXP _flowWorkspace_subset_cytoframe_by_cols(SEXP fr, SEXP idx) {
  BEGIN_CPP11
    subset_cytoframe_by_cols(cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<CytoFrameView>>>(fr), cpp11::as_cpp<cpp11::decay_t<vector<int>>>(idx));
    return R_NilValue;
  END_CPP11
}
// cytoframeAPI.cpp
void frm_compensate(cpp11::external_pointer<CytoFrameView> fr, cpp11::doubles_matrix<> spillover);
extern "C" SEXP _flowWorkspace_frm_compensate(SEXP fr, SEXP spillover) {
  BEGIN_CPP11
    frm_compensate(cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<CytoFrameView>>>(fr), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles_matrix<>>>(spillover));
    return R_NilValue;
  END_CPP11
}
// cytoframeAPI.cpp
void write_to_disk(cpp11::external_pointer<CytoFrameView> fr, string filename, bool ish5);
extern "C" SEXP _flowWorkspace_write_to_disk(SEXP fr, SEXP filename, SEXP ish5) {
  BEGIN_CPP11
    write_to_disk(cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<CytoFrameView>>>(fr), cpp11::as_cpp<cpp11::decay_t<string>>(filename), cpp11::as_cpp<cpp11::decay_t<bool>>(ish5));
    return R_NilValue;
  END_CPP11
}
// cytoframeAPI.cpp
cpp11::external_pointer<CytoFrameView> load_cf(string url, bool readonly, bool on_disk);
extern "C" SEXP _flowWorkspace_load_cf(SEXP url, SEXP readonly, SEXP on_disk) {
  BEGIN_CPP11
    return cpp11::as_sexp(load_cf(cpp11::as_cpp<cpp11::decay_t<string>>(url), cpp11::as_cpp<cpp11::decay_t<bool>>(readonly), cpp11::as_cpp<cpp11::decay_t<bool>>(on_disk)));
  END_CPP11
}
// cytoframeAPI.cpp
cpp11::external_pointer<CytoFrameView> cf_to_memcf(cpp11::external_pointer<CytoFrameView> fr);
extern "C" SEXP _flowWorkspace_cf_to_memcf(SEXP fr) {
  BEGIN_CPP11
    return cpp11::as_sexp(cf_to_memcf(cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<CytoFrameView>>>(fr)));
  END_CPP11
}
// cytoframeAPI.cpp
void setMarker(cpp11::external_pointer<CytoFrameView> fr, string channel, string marker);
extern "C" SEXP _flowWorkspace_setMarker(SEXP fr, SEXP channel, SEXP marker) {
  BEGIN_CPP11
    setMarker(cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<CytoFrameView>>>(fr), cpp11::as_cpp<cpp11::decay_t<string>>(channel), cpp11::as_cpp<cpp11::decay_t<string>>(marker));
    return R_NilValue;
  END_CPP11
}
// cytoframeAPI.cpp
void set_all_channels(cpp11::external_pointer<CytoFrameView> fr, vector<string> new_names);
extern "C" SEXP _flowWorkspace_set_all_channels(SEXP fr, SEXP new_names) {
  BEGIN_CPP11
    set_all_channels(cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<CytoFrameView>>>(fr), cpp11::as_cpp<cpp11::decay_t<vector<string>>>(new_names));
    return R_NilValue;
  END_CPP11
}
// cytoframeAPI.cpp
void setChannel(cpp11::external_pointer<CytoFrameView> fr, string old, string new_name);
extern "C" SEXP _flowWorkspace_setChannel(SEXP fr, SEXP old, SEXP new_name) {
  BEGIN_CPP11
    setChannel(cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<CytoFrameView>>>(fr), cpp11::as_cpp<cpp11::decay_t<string>>(old), cpp11::as_cpp<cpp11::decay_t<string>>(new_name));
    return R_NilValue;
  END_CPP11
}
// cytoframeAPI.cpp
vector<string> get_channels(cpp11::external_pointer<CytoFrameView> fr);
extern "C" SEXP _flowWorkspace_get_channels(SEXP fr) {
  BEGIN_CPP11
    return cpp11::as_sexp(get_channels(cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<CytoFrameView>>>(fr)));
  END_CPP11
}
// cytoframeAPI.cpp
void append_cols(cpp11::external_pointer<CytoFrameView> fr, vector<string> new_colnames, cpp11::doubles_matrix<> new_cols_mat);
extern "C" SEXP _flowWorkspace_append_cols(SEXP fr, SEXP new_colnames, SEXP new_cols_mat) {
  BEGIN_CPP11
    append_cols(cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<CytoFrameView>>>(fr), cpp11::as_cpp<cpp11::decay_t<vector<string>>>(new_colnames), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles_matrix<>>>(new_cols_mat));
    return R_NilValue;
  END_CPP11
}
// cytoframeAPI.cpp
cpp11::external_pointer<CytoFrameView> parseFCS(string filename, SEXP configr, bool text_only, string format, string uri);
extern "C" SEXP _flowWorkspace_parseFCS(SEXP filename, SEXP configr, SEXP text_only, SEXP format, SEXP uri) {
  BEGIN_CPP11
    return cpp11::as_sexp(parseFCS(cpp11::as_cpp<cpp11::decay_t<string>>(filename), cpp11::as_cpp<cpp11::decay_t<SEXP>>(configr), cpp11::as_cpp<cpp11::decay_t<bool>>(text_only), cpp11::as_cpp<cpp11::decay_t<string>>(format), cpp11::as_cpp<cpp11::decay_t<string>>(uri)));
  END_CPP11
}
// cytoframeAPI.cpp
cpp11::writable::doubles_matrix<> cf_getData(cpp11::external_pointer<CytoFrameView> fr);
extern "C" SEXP _flowWorkspace_cf_getData(SEXP fr) {
  BEGIN_CPP11
    return cpp11::as_sexp(cf_getData(cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<CytoFrameView>>>(fr)));
  END_CPP11
}
// cytoframeAPI.cpp
void cf_setData(cpp11::external_pointer<CytoFrameView> fr, cpp11::doubles_matrix<> rmat);
extern "C" SEXP _flowWorkspace_cf_setData(SEXP fr, SEXP rmat) {
  BEGIN_CPP11
    cf_setData(cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<CytoFrameView>>>(fr), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles_matrix<>>>(rmat));
    return R_NilValue;
  END_CPP11
}
// cytoframeAPI.cpp
void cf_transform_data(cpp11::external_pointer<CytoFrameView> fr, cpp11::list translist);
extern "C" SEXP _flowWorkspace_cf_transform_data(SEXP fr, SEXP translist) {
  BEGIN_CPP11
    cf_transform_data(cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<CytoFrameView>>>(fr), cpp11::as_cpp<cpp11::decay_t<cpp11::list>>(translist));
    return R_NilValue;
  END_CPP11
}
// cytoframeAPI.cpp
string cf_getKeyword(cpp11::external_pointer<CytoFrameView> fr, string key);
extern "C" SEXP _flowWorkspace_cf_getKeyword(SEXP fr, SEXP key) {
  BEGIN_CPP11
    return cpp11::as_sexp(cf_getKeyword(cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<CytoFrameView>>>(fr), cpp11::as_cpp<cpp11::decay_t<string>>(key)));
  END_CPP11
}
// cytoframeAPI.cpp
SEXP cf_getKeywords(cpp11::external_pointer<CytoFrameView> fr);
extern "C" SEXP _flowWorkspace_cf_getKeywords(SEXP fr) {
  BEGIN_CPP11
    return cpp11::as_sexp(cf_getKeywords(cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<CytoFrameView>>>(fr)));
  END_CPP11
}
// cytoframeAPI.cpp
void cf_setKeywords(cpp11::external_pointer<CytoFrameView> fr, cpp11::list_of<cpp11::r_string> keys);
extern "C" SEXP _flowWorkspace_cf_setKeywords(SEXP fr, SEXP keys) {
  BEGIN_CPP11
    cf_setKeywords(cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<CytoFrameView>>>(fr), cpp11::as_cpp<cpp11::decay_t<cpp11::list_of<cpp11::r_string>>>(keys));
    return R_NilValue;
  END_CPP11
}
// cytoframeAPI.cpp
void cf_setKeywordsSubset(cpp11::external_pointer<CytoFrameView> fr, cpp11::strings keys, cpp11::strings values);
extern "C" SEXP _flowWorkspace_cf_setKeywordsSubset(SEXP fr, SEXP keys, SEXP values) {
  BEGIN_CPP11
    cf_setKeywordsSubset(cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<CytoFrameView>>>(fr), cpp11::as_cpp<cpp11::decay_t<cpp11::strings>>(keys), cpp11::as_cpp<cpp11::decay_t<cpp11::strings>>(values));
    return R_NilValue;
  END_CPP11
}
// cytoframeAPI.cpp
void cf_renameKeywords(cpp11::external_pointer<CytoFrameView> fr, cpp11::strings old_keys, cpp11::strings new_keys);
extern "C" SEXP _flowWorkspace_cf_renameKeywords(SEXP fr, SEXP old_keys, SEXP new_keys) {
  BEGIN_CPP11
    cf_renameKeywords(cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<CytoFrameView>>>(fr), cpp11::as_cpp<cpp11::decay_t<cpp11::strings>>(old_keys), cpp11::as_cpp<cpp11::decay_t<cpp11::strings>>(new_keys));
    return R_NilValue;
  END_CPP11
}
// cytoframeAPI.cpp
void cf_removeKeywords(cpp11::external_pointer<CytoFrameView> fr, cpp11::strings keys);
extern "C" SEXP _flowWorkspace_cf_removeKeywords(SEXP fr, SEXP keys) {
  BEGIN_CPP11
    cf_removeKeywords(cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<CytoFrameView>>>(fr), cpp11::as_cpp<cpp11::decay_t<cpp11::strings>>(keys));
    return R_NilValue;
  END_CPP11
}
// cytoframeAPI.cpp
int getncol(cpp11::external_pointer<CytoFrameView> fr);
extern "C" SEXP _flowWorkspace_getncol(SEXP fr) {
  BEGIN_CPP11
    return cpp11::as_sexp(getncol(cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<CytoFrameView>>>(fr)));
  END_CPP11
}
// cytoframeAPI.cpp
int getnrow(cpp11::external_pointer<CytoFrameView> fr);
extern "C" SEXP _flowWorkspace_getnrow(SEXP fr) {
  BEGIN_CPP11
    return cpp11::as_sexp(getnrow(cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<CytoFrameView>>>(fr)));
  END_CPP11
}
// cytoframeAPI.cpp
void setpdata(cpp11::external_pointer<CytoFrameView> fr, cpp11::data_frame df);
extern "C" SEXP _flowWorkspace_setpdata(SEXP fr, SEXP df) {
  BEGIN_CPP11
    setpdata(cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<CytoFrameView>>>(fr), cpp11::as_cpp<cpp11::decay_t<cpp11::data_frame>>(df));
    return R_NilValue;
  END_CPP11
}
// cytoframeAPI.cpp
cpp11::writable::data_frame getpdata(cpp11::external_pointer<CytoFrameView> fr);
extern "C" SEXP _flowWorkspace_getpdata(SEXP fr) {
  BEGIN_CPP11
    return cpp11::as_sexp(getpdata(cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<CytoFrameView>>>(fr)));
  END_CPP11
}
// cytosetAPI.cpp
void cs_set_compensation(cpp11::external_pointer<GatingSet> cs, cpp11::list comps, bool compensate_data);
extern "C" SEXP _flowWorkspace_cs_set_compensation(SEXP cs, SEXP comps, SEXP compensate_data) {
  BEGIN_CPP11
    cs_set_compensation(cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<GatingSet>>>(cs), cpp11::as_cpp<cpp11::decay_t<cpp11::list>>(comps), cpp11::as_cpp<cpp11::decay_t<bool>>(compensate_data));
    return R_NilValue;
  END_CPP11
}
// cytosetAPI.cpp
void set_cytoframe(cpp11::external_pointer<GatingSet> cs, string sn, cpp11::external_pointer<CytoFrameView> fr);
extern "C" SEXP _flowWorkspace_set_cytoframe(SEXP cs, SEXP sn, SEXP fr) {
  BEGIN_CPP11
    set_cytoframe(cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<GatingSet>>>(cs), cpp11::as_cpp<cpp11::decay_t<string>>(sn), cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<CytoFrameView>>>(fr));
    return R_NilValue;
  END_CPP11
}
// cytosetAPI.cpp
void add_cytoframe(cpp11::external_pointer<GatingSet> cs, string sn, cpp11::external_pointer<CytoFrameView> fr);
extern "C" SEXP _flowWorkspace_add_cytoframe(SEXP cs, SEXP sn, SEXP fr) {
  BEGIN_CPP11
    add_cytoframe(cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<GatingSet>>>(cs), cpp11::as_cpp<cpp11::decay_t<string>>(sn), cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<CytoFrameView>>>(fr));
    return R_NilValue;
  END_CPP11
}
// cytosetAPI.cpp
cpp11::external_pointer<GatingSet> new_cytoset();
extern "C" SEXP _flowWorkspace_new_cytoset() {
  BEGIN_CPP11
    return cpp11::as_sexp(new_cytoset());
  END_CPP11
}
// cytosetAPI.cpp
cpp11::external_pointer<GatingSet> fcs_to_cytoset(cpp11::strings files, cpp11::list rconfig, string backend, string backend_dir);
extern "C" SEXP _flowWorkspace_fcs_to_cytoset(SEXP files, SEXP rconfig, SEXP backend, SEXP backend_dir) {
  BEGIN_CPP11
    return cpp11::as_sexp(fcs_to_cytoset(cpp11::as_cpp<cpp11::decay_t<cpp11::strings>>(files), cpp11::as_cpp<cpp11::decay_t<cpp11::list>>(rconfig), cpp11::as_cpp<cpp11::decay_t<string>>(backend), cpp11::as_cpp<cpp11::decay_t<string>>(backend_dir)));
  END_CPP11
}
// cytosetAPI.cpp
vector<string> get_colnames(cpp11::external_pointer<GatingSet> cs);
extern "C" SEXP _flowWorkspace_get_colnames(SEXP cs) {
  BEGIN_CPP11
    return cpp11::as_sexp(get_colnames(cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<GatingSet>>>(cs)));
  END_CPP11
}
// cytosetAPI.cpp
cpp11::external_pointer<GatingSet> realize_view_cytoset(cpp11::external_pointer<GatingSet> cs, string path);
extern "C" SEXP _flowWorkspace_realize_view_cytoset(SEXP cs, SEXP path) {
  BEGIN_CPP11
    return cpp11::as_sexp(realize_view_cytoset(cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<GatingSet>>>(cs), cpp11::as_cpp<cpp11::decay_t<string>>(path)));
  END_CPP11
}
// cytosetAPI.cpp
cpp11::external_pointer<GatingSet> copy_view_cytoset(cpp11::external_pointer<GatingSet> cs);
extern "C" SEXP _flowWorkspace_copy_view_cytoset(SEXP cs) {
  BEGIN_CPP11
    return cpp11::as_sexp(copy_view_cytoset(cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<GatingSet>>>(cs)));
  END_CPP11
}
// cytosetAPI.cpp
void subset_cytoset_by_rows(cpp11::external_pointer<GatingSet> cs, string sn, vector<int> idx);
extern "C" SEXP _flowWorkspace_subset_cytoset_by_rows(SEXP cs, SEXP sn, SEXP idx) {
  BEGIN_CPP11
    subset_cytoset_by_rows(cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<GatingSet>>>(cs), cpp11::as_cpp<cpp11::decay_t<string>>(sn), cpp11::as_cpp<cpp11::decay_t<vector<int>>>(idx));
    return R_NilValue;
  END_CPP11
}
// cytosetAPI.cpp
void subset_cytoset(cpp11::external_pointer<GatingSet> cs, vector<string> sample_uids, vector<string> ch_selected);
extern "C" SEXP _flowWorkspace_subset_cytoset(SEXP cs, SEXP sample_uids, SEXP ch_selected) {
  BEGIN_CPP11
    subset_cytoset(cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<GatingSet>>>(cs), cpp11::as_cpp<cpp11::decay_t<vector<string>>>(sample_uids), cpp11::as_cpp<cpp11::decay_t<vector<string>>>(ch_selected));
    return R_NilValue;
  END_CPP11
}
// cytosetAPI.cpp
cpp11::external_pointer<CytoFrameView> get_cytoframe(cpp11::external_pointer<GatingSet> cs, string sample_uid, vector<string> ch_selected);
extern "C" SEXP _flowWorkspace_get_cytoframe(SEXP cs, SEXP sample_uid, SEXP ch_selected) {
  BEGIN_CPP11
    return cpp11::as_sexp(get_cytoframe(cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<GatingSet>>>(cs), cpp11::as_cpp<cpp11::decay_t<string>>(sample_uid), cpp11::as_cpp<cpp11::decay_t<vector<string>>>(ch_selected)));
  END_CPP11
}
// cytosetAPI.cpp
void set_pheno_data(cpp11::external_pointer<GatingSet> cs, cpp11::data_frame value);
extern "C" SEXP _flowWorkspace_set_pheno_data(SEXP cs, SEXP value) {
  BEGIN_CPP11
    set_pheno_data(cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<GatingSet>>>(cs), cpp11::as_cpp<cpp11::decay_t<cpp11::data_frame>>(value));
    return R_NilValue;
  END_CPP11
}
// cytosetAPI.cpp
cpp11::writable::list get_pheno_data(cpp11::external_pointer<GatingSet> cs);
extern "C" SEXP _flowWorkspace_get_pheno_data(SEXP cs) {
  BEGIN_CPP11
    return cpp11::as_sexp(get_pheno_data(cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<GatingSet>>>(cs)));
  END_CPP11
}
// getDescendants.cpp
VertexID_vec getDescendants_cpp(cpp11::external_pointer<GatingSet> gsPtr, string sampleName, string node);
extern "C" SEXP _flowWorkspace_getDescendants_cpp(SEXP gsPtr, SEXP sampleName, SEXP node) {
  BEGIN_CPP11
    return cpp11::as_sexp(getDescendants_cpp(cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<GatingSet>>>(gsPtr), cpp11::as_cpp<cpp11::decay_t<string>>(sampleName), cpp11::as_cpp<cpp11::decay_t<string>>(node)));
  END_CPP11
}
// getPopStats.cpp
cpp11::list getPopCounts_cpp(cpp11::external_pointer<GatingSet> gs, bool freq, StringVec subpopulation, bool flowJo, bool isFullPath);
extern "C" SEXP _flowWorkspace_getPopCounts_cpp(SEXP gs, SEXP freq, SEXP subpopulation, SEXP flowJo, SEXP isFullPath) {
  BEGIN_CPP11
    return cpp11::as_sexp(getPopCounts_cpp(cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<GatingSet>>>(gs), cpp11::as_cpp<cpp11::decay_t<bool>>(freq), cpp11::as_cpp<cpp11::decay_t<StringVec>>(subpopulation), cpp11::as_cpp<cpp11::decay_t<bool>>(flowJo), cpp11::as_cpp<cpp11::decay_t<bool>>(isFullPath)));
  END_CPP11
}
// getSingleCellExpression.cpp
cpp11::writable::doubles_matrix<> cpp_getSingleCellExpressionByGate(cpp11::external_pointer<GatingSet> gs, string sampleName, cpp11::list markers_pops, cpp11::doubles_matrix<> data, cpp11::strings markers, bool threshold);
extern "C" SEXP _flowWorkspace_cpp_getSingleCellExpressionByGate(SEXP gs, SEXP sampleName, SEXP markers_pops, SEXP data, SEXP markers, SEXP threshold) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_getSingleCellExpressionByGate(cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<GatingSet>>>(gs), cpp11::as_cpp<cpp11::decay_t<string>>(sampleName), cpp11::as_cpp<cpp11::decay_t<cpp11::list>>(markers_pops), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles_matrix<>>>(data), cpp11::as_cpp<cpp11::decay_t<cpp11::strings>>(markers), cpp11::as_cpp<cpp11::decay_t<bool>>(threshold)));
  END_CPP11
}
// getSingleCellExpression.cpp
cpp11::writable::doubles_matrix<> cpp_getSingleCellExpression(cpp11::external_pointer<GatingSet> gs, string sampleName, vector<string> pops, cpp11::doubles_matrix<> data, cpp11::strings markers, bool threshold);
extern "C" SEXP _flowWorkspace_cpp_getSingleCellExpression(SEXP gs, SEXP sampleName, SEXP pops, SEXP data, SEXP markers, SEXP threshold) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_getSingleCellExpression(cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<GatingSet>>>(gs), cpp11::as_cpp<cpp11::decay_t<string>>(sampleName), cpp11::as_cpp<cpp11::decay_t<vector<string>>>(pops), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles_matrix<>>>(data), cpp11::as_cpp<cpp11::decay_t<cpp11::strings>>(markers), cpp11::as_cpp<cpp11::decay_t<bool>>(threshold)));
  END_CPP11
}
// h5_error_r_handler.cpp
void h5_set_error_handler();
extern "C" SEXP _flowWorkspace_h5_set_error_handler() {
  BEGIN_CPP11
    h5_set_error_handler();
    return R_NilValue;
  END_CPP11
}
// R_API.cpp
string gen_uid();
extern "C" SEXP _flowWorkspace_gen_uid() {
  BEGIN_CPP11
    return cpp11::as_sexp(gen_uid());
  END_CPP11
}
// R_API.cpp
cpp11::list getSplineCoefs(int channelRange, double maxValue, double pos, double neg, double widthBasis, bool inverse);
extern "C" SEXP _flowWorkspace_getSplineCoefs(SEXP channelRange, SEXP maxValue, SEXP pos, SEXP neg, SEXP widthBasis, SEXP inverse) {
  BEGIN_CPP11
    return cpp11::as_sexp(getSplineCoefs(cpp11::as_cpp<cpp11::decay_t<int>>(channelRange), cpp11::as_cpp<cpp11::decay_t<double>>(maxValue), cpp11::as_cpp<cpp11::decay_t<double>>(pos), cpp11::as_cpp<cpp11::decay_t<double>>(neg), cpp11::as_cpp<cpp11::decay_t<double>>(widthBasis), cpp11::as_cpp<cpp11::decay_t<bool>>(inverse)));
  END_CPP11
}
// R_API.cpp
void updateChannels_cpp(cpp11::external_pointer<GatingSet> gsPtr, cpp11::data_frame map);
extern "C" SEXP _flowWorkspace_updateChannels_cpp(SEXP gsPtr, SEXP map) {
  BEGIN_CPP11
    updateChannels_cpp(cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<GatingSet>>>(gsPtr), cpp11::as_cpp<cpp11::decay_t<cpp11::data_frame>>(map));
    return R_NilValue;
  END_CPP11
}
// R_GatingHierarchy.cpp
void cpp_plotGh(cpp11::external_pointer<GatingSet> gs, string sampleName, string output);
extern "C" SEXP _flowWorkspace_cpp_plotGh(SEXP gs, SEXP sampleName, SEXP output) {
  BEGIN_CPP11
    cpp_plotGh(cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<GatingSet>>>(gs), cpp11::as_cpp<cpp11::decay_t<string>>(sampleName), cpp11::as_cpp<cpp11::decay_t<string>>(output));
    return R_NilValue;
  END_CPP11
}
// R_GatingHierarchy.cpp
StringVec cpp_getNodes(cpp11::external_pointer<GatingSet> gs, string sampleName, int order, bool fullPath, bool showHidden);
extern "C" SEXP _flowWorkspace_cpp_getNodes(SEXP gs, SEXP sampleName, SEXP order, SEXP fullPath, SEXP showHidden) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_getNodes(cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<GatingSet>>>(gs), cpp11::as_cpp<cpp11::decay_t<string>>(sampleName), cpp11::as_cpp<cpp11::decay_t<int>>(order), cpp11::as_cpp<cpp11::decay_t<bool>>(fullPath), cpp11::as_cpp<cpp11::decay_t<bool>>(showHidden)));
  END_CPP11
}
// R_GatingHierarchy.cpp
string getNodePath(cpp11::external_pointer<GatingSet> gs, string sampleName, int id);
extern "C" SEXP _flowWorkspace_getNodePath(SEXP gs, SEXP sampleName, SEXP id) {
  BEGIN_CPP11
    return cpp11::as_sexp(getNodePath(cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<GatingSet>>>(gs), cpp11::as_cpp<cpp11::decay_t<string>>(sampleName), cpp11::as_cpp<cpp11::decay_t<int>>(id)));
  END_CPP11
}
// R_GatingHierarchy.cpp
int cpp_getNodeID(cpp11::external_pointer<GatingSet> gs, string sampleName, string gatePath);
extern "C" SEXP _flowWorkspace_cpp_getNodeID(SEXP gs, SEXP sampleName, SEXP gatePath) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_getNodeID(cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<GatingSet>>>(gs), cpp11::as_cpp<cpp11::decay_t<string>>(sampleName), cpp11::as_cpp<cpp11::decay_t<string>>(gatePath)));
  END_CPP11
}
// R_GatingHierarchy.cpp
int cpp_getParent(cpp11::external_pointer<GatingSet> gs, string sampleName, string gatePath);
extern "C" SEXP _flowWorkspace_cpp_getParent(SEXP gs, SEXP sampleName, SEXP gatePath) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_getParent(cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<GatingSet>>>(gs), cpp11::as_cpp<cpp11::decay_t<string>>(sampleName), cpp11::as_cpp<cpp11::decay_t<string>>(gatePath)));
  END_CPP11
}
// R_GatingHierarchy.cpp
vector<int> cpp_getChildren(cpp11::external_pointer<GatingSet> gs, string sampleName, string gatePath, bool showHidden);
extern "C" SEXP _flowWorkspace_cpp_getChildren(SEXP gs, SEXP sampleName, SEXP gatePath, SEXP showHidden) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_getChildren(cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<GatingSet>>>(gs), cpp11::as_cpp<cpp11::decay_t<string>>(sampleName), cpp11::as_cpp<cpp11::decay_t<string>>(gatePath), cpp11::as_cpp<cpp11::decay_t<bool>>(showHidden)));
  END_CPP11
}
// R_GatingHierarchy.cpp
cpp11::writable::list cpp_getPopStats(cpp11::external_pointer<GatingSet> gs, string sampleName, string gatePath);
extern "C" SEXP _flowWorkspace_cpp_getPopStats(SEXP gs, SEXP sampleName, SEXP gatePath) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_getPopStats(cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<GatingSet>>>(gs), cpp11::as_cpp<cpp11::decay_t<string>>(sampleName), cpp11::as_cpp<cpp11::decay_t<string>>(gatePath)));
  END_CPP11
}
// R_GatingHierarchy.cpp
cpp11::list cpp_getCompensation(cpp11::external_pointer<GatingSet> gs, string sampleName);
extern "C" SEXP _flowWorkspace_cpp_getCompensation(SEXP gs, SEXP sampleName) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_getCompensation(cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<GatingSet>>>(gs), cpp11::as_cpp<cpp11::decay_t<string>>(sampleName)));
  END_CPP11
}
// R_GatingHierarchy.cpp
void set_transformations(cpp11::external_pointer<GatingSet> gs, string sampleName, cpp11::list translist);
extern "C" SEXP _flowWorkspace_set_transformations(SEXP gs, SEXP sampleName, SEXP translist) {
  BEGIN_CPP11
    set_transformations(cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<GatingSet>>>(gs), cpp11::as_cpp<cpp11::decay_t<string>>(sampleName), cpp11::as_cpp<cpp11::decay_t<cpp11::list>>(translist));
    return R_NilValue;
  END_CPP11
}
// R_GatingHierarchy.cpp
cpp11::writable::list cpp_getTransformations(cpp11::external_pointer<GatingSet> gs, string sampleName, bool inverse);
extern "C" SEXP _flowWorkspace_cpp_getTransformations(SEXP gs, SEXP sampleName, SEXP inverse) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_getTransformations(cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<GatingSet>>>(gs), cpp11::as_cpp<cpp11::decay_t<string>>(sampleName), cpp11::as_cpp<cpp11::decay_t<bool>>(inverse)));
  END_CPP11
}
// R_GatingHierarchy.cpp
cpp11::list cpp_getGate(cpp11::external_pointer<GatingSet> gs, string sampleName, string gatePath);
extern "C" SEXP _flowWorkspace_cpp_getGate(SEXP gs, SEXP sampleName, SEXP gatePath) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_getGate(cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<GatingSet>>>(gs), cpp11::as_cpp<cpp11::decay_t<string>>(sampleName), cpp11::as_cpp<cpp11::decay_t<string>>(gatePath)));
  END_CPP11
}
// R_GatingHierarchy.cpp
vector<bool> cpp_getIndices(cpp11::external_pointer<GatingSet> gs, string sampleName, string gatePath);
extern "C" SEXP _flowWorkspace_cpp_getIndices(SEXP gs, SEXP sampleName, SEXP gatePath) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_getIndices(cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<GatingSet>>>(gs), cpp11::as_cpp<cpp11::decay_t<string>>(sampleName), cpp11::as_cpp<cpp11::decay_t<string>>(gatePath)));
  END_CPP11
}
// R_GatingHierarchy.cpp
void cpp_setIndices(cpp11::external_pointer<GatingSet> gs, string sampleName, int u, cpp11::logicals ind);
extern "C" SEXP _flowWorkspace_cpp_setIndices(SEXP gs, SEXP sampleName, SEXP u, SEXP ind) {
  BEGIN_CPP11
    cpp_setIndices(cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<GatingSet>>>(gs), cpp11::as_cpp<cpp11::decay_t<string>>(sampleName), cpp11::as_cpp<cpp11::decay_t<int>>(u), cpp11::as_cpp<cpp11::decay_t<cpp11::logicals>>(ind));
    return R_NilValue;
  END_CPP11
}
// R_GatingHierarchy.cpp
bool cpp_getGateFlag(cpp11::external_pointer<GatingSet> gs, string sampleName, string gatePath);
extern "C" SEXP _flowWorkspace_cpp_getGateFlag(SEXP gs, SEXP sampleName, SEXP gatePath) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_getGateFlag(cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<GatingSet>>>(gs), cpp11::as_cpp<cpp11::decay_t<string>>(sampleName), cpp11::as_cpp<cpp11::decay_t<string>>(gatePath)));
  END_CPP11
}
// R_GatingHierarchy.cpp
bool cpp_getNegateFlag(cpp11::external_pointer<GatingSet> gs, string sampleName, string gatePath);
extern "C" SEXP _flowWorkspace_cpp_getNegateFlag(SEXP gs, SEXP sampleName, SEXP gatePath) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_getNegateFlag(cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<GatingSet>>>(gs), cpp11::as_cpp<cpp11::decay_t<string>>(sampleName), cpp11::as_cpp<cpp11::decay_t<string>>(gatePath)));
  END_CPP11
}
// R_GatingHierarchy.cpp
bool cpp_getHiddenFlag(cpp11::external_pointer<GatingSet> gs, string sampleName, string gatePath);
extern "C" SEXP _flowWorkspace_cpp_getHiddenFlag(SEXP gs, SEXP sampleName, SEXP gatePath) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_getHiddenFlag(cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<GatingSet>>>(gs), cpp11::as_cpp<cpp11::decay_t<string>>(sampleName), cpp11::as_cpp<cpp11::decay_t<string>>(gatePath)));
  END_CPP11
}
// R_GatingHierarchy.cpp
NODEID cpp_addGate(cpp11::external_pointer<GatingSet> gs, string sampleName, cpp11::list filter, string gatePath, string popName);
extern "C" SEXP _flowWorkspace_cpp_addGate(SEXP gs, SEXP sampleName, SEXP filter, SEXP gatePath, SEXP popName) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_addGate(cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<GatingSet>>>(gs), cpp11::as_cpp<cpp11::decay_t<string>>(sampleName), cpp11::as_cpp<cpp11::decay_t<cpp11::list>>(filter), cpp11::as_cpp<cpp11::decay_t<string>>(gatePath), cpp11::as_cpp<cpp11::decay_t<string>>(popName)));
  END_CPP11
}
// R_GatingHierarchy.cpp
void cpp_boolGating(cpp11::external_pointer<GatingSet> gs, string sampleName, cpp11::list filter, unsigned nodeID);
extern "C" SEXP _flowWorkspace_cpp_boolGating(SEXP gs, SEXP sampleName, SEXP filter, SEXP nodeID) {
  BEGIN_CPP11
    cpp_boolGating(cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<GatingSet>>>(gs), cpp11::as_cpp<cpp11::decay_t<string>>(sampleName), cpp11::as_cpp<cpp11::decay_t<cpp11::list>>(filter), cpp11::as_cpp<cpp11::decay_t<unsigned>>(nodeID));
    return R_NilValue;
  END_CPP11
}
// R_GatingHierarchy.cpp
void set_quadgate(cpp11::external_pointer<GatingSet> gs, string sampleName, string gatePath, vector<double> inter);
extern "C" SEXP _flowWorkspace_set_quadgate(SEXP gs, SEXP sampleName, SEXP gatePath, SEXP inter) {
  BEGIN_CPP11
    set_quadgate(cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<GatingSet>>>(gs), cpp11::as_cpp<cpp11::decay_t<string>>(sampleName), cpp11::as_cpp<cpp11::decay_t<string>>(gatePath), cpp11::as_cpp<cpp11::decay_t<vector<double>>>(inter));
    return R_NilValue;
  END_CPP11
}
// R_GatingHierarchy.cpp
void cpp_setGate(cpp11::external_pointer<GatingSet> gs, string sampleName, string gatePath, cpp11::list filter);
extern "C" SEXP _flowWorkspace_cpp_setGate(SEXP gs, SEXP sampleName, SEXP gatePath, SEXP filter) {
  BEGIN_CPP11
    cpp_setGate(cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<GatingSet>>>(gs), cpp11::as_cpp<cpp11::decay_t<string>>(sampleName), cpp11::as_cpp<cpp11::decay_t<string>>(gatePath), cpp11::as_cpp<cpp11::decay_t<cpp11::list>>(filter));
    return R_NilValue;
  END_CPP11
}
// R_GatingHierarchy.cpp
void cpp_removeNode(cpp11::external_pointer<GatingSet> gs, string sampleName, string gatePath, bool recursive);
extern "C" SEXP _flowWorkspace_cpp_removeNode(SEXP gs, SEXP sampleName, SEXP gatePath, SEXP recursive) {
  BEGIN_CPP11
    cpp_removeNode(cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<GatingSet>>>(gs), cpp11::as_cpp<cpp11::decay_t<string>>(sampleName), cpp11::as_cpp<cpp11::decay_t<string>>(gatePath), cpp11::as_cpp<cpp11::decay_t<bool>>(recursive));
    return R_NilValue;
  END_CPP11
}
// R_GatingHierarchy.cpp
void moveNode(cpp11::external_pointer<GatingSet> gsPtr, string sampleName, string node, string parent);
extern "C" SEXP _flowWorkspace_moveNode(SEXP gsPtr, SEXP sampleName, SEXP node, SEXP parent) {
  BEGIN_CPP11
    moveNode(cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<GatingSet>>>(gsPtr), cpp11::as_cpp<cpp11::decay_t<string>>(sampleName), cpp11::as_cpp<cpp11::decay_t<string>>(node), cpp11::as_cpp<cpp11::decay_t<string>>(parent));
    return R_NilValue;
  END_CPP11
}
// R_GatingHierarchy.cpp
void setNodeName(cpp11::external_pointer<GatingSet> gs, string sampleName, string gatePath, string newNodeName);
extern "C" SEXP _flowWorkspace_setNodeName(SEXP gs, SEXP sampleName, SEXP gatePath, SEXP newNodeName) {
  BEGIN_CPP11
    setNodeName(cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<GatingSet>>>(gs), cpp11::as_cpp<cpp11::decay_t<string>>(sampleName), cpp11::as_cpp<cpp11::decay_t<string>>(gatePath), cpp11::as_cpp<cpp11::decay_t<string>>(newNodeName));
    return R_NilValue;
  END_CPP11
}
// R_GatingHierarchy.cpp
void setNodeFlag(cpp11::external_pointer<GatingSet> gs, string sampleName, string gatePath, bool hidden);
extern "C" SEXP _flowWorkspace_setNodeFlag(SEXP gs, SEXP sampleName, SEXP gatePath, SEXP hidden) {
  BEGIN_CPP11
    setNodeFlag(cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<GatingSet>>>(gs), cpp11::as_cpp<cpp11::decay_t<string>>(sampleName), cpp11::as_cpp<cpp11::decay_t<string>>(gatePath), cpp11::as_cpp<cpp11::decay_t<bool>>(hidden));
    return R_NilValue;
  END_CPP11
}
// R_GatingSet.cpp
void gs_transform_data(cpp11::external_pointer<GatingSet> gsPtr);
extern "C" SEXP _flowWorkspace_gs_transform_data(SEXP gsPtr) {
  BEGIN_CPP11
    gs_transform_data(cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<GatingSet>>>(gsPtr));
    return R_NilValue;
  END_CPP11
}
// R_GatingSet.cpp
void cpp_gating(cpp11::external_pointer<GatingSet> gsPtr, vector<string> nodes, bool alwaysLoadData, bool verbose, bool leafbool);
extern "C" SEXP _flowWorkspace_cpp_gating(SEXP gsPtr, SEXP nodes, SEXP alwaysLoadData, SEXP verbose, SEXP leafbool) {
  BEGIN_CPP11
    cpp_gating(cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<GatingSet>>>(gsPtr), cpp11::as_cpp<cpp11::decay_t<vector<string>>>(nodes), cpp11::as_cpp<cpp11::decay_t<bool>>(alwaysLoadData), cpp11::as_cpp<cpp11::decay_t<bool>>(verbose), cpp11::as_cpp<cpp11::decay_t<bool>>(leafbool));
    return R_NilValue;
  END_CPP11
}
// R_GatingSet.cpp
cpp11::external_pointer<GatingSet> subset_gs_by_sample(cpp11::external_pointer<GatingSet> gsPtr, vector<string> samples);
extern "C" SEXP _flowWorkspace_subset_gs_by_sample(SEXP gsPtr, SEXP samples) {
  BEGIN_CPP11
    return cpp11::as_sexp(subset_gs_by_sample(cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<GatingSet>>>(gsPtr), cpp11::as_cpp<cpp11::decay_t<vector<string>>>(samples)));
  END_CPP11
}
// R_GatingSet.cpp
cpp11::external_pointer<GatingSet> get_cytoset(cpp11::external_pointer<GatingSet> gsPtr);
extern "C" SEXP _flowWorkspace_get_cytoset(SEXP gsPtr) {
  BEGIN_CPP11
    return cpp11::as_sexp(get_cytoset(cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<GatingSet>>>(gsPtr)));
  END_CPP11
}
// R_GatingSet.cpp
cpp11::external_pointer<GatingSet> get_cytoset_from_node(cpp11::external_pointer<GatingSet> gsPtr, string node);
extern "C" SEXP _flowWorkspace_get_cytoset_from_node(SEXP gsPtr, SEXP node) {
  BEGIN_CPP11
    return cpp11::as_sexp(get_cytoset_from_node(cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<GatingSet>>>(gsPtr), cpp11::as_cpp<cpp11::decay_t<string>>(node)));
  END_CPP11
}
// R_GatingSet.cpp
void set_cytoset(cpp11::external_pointer<GatingSet> gsPtr, cpp11::external_pointer<GatingSet> cs);
extern "C" SEXP _flowWorkspace_set_cytoset(SEXP gsPtr, SEXP cs) {
  BEGIN_CPP11
    set_cytoset(cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<GatingSet>>>(gsPtr), cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<GatingSet>>>(cs));
    return R_NilValue;
  END_CPP11
}
// R_GatingSet.cpp
StringVec cpp_getSamples(cpp11::external_pointer<GatingSet> gsPtr);
extern "C" SEXP _flowWorkspace_cpp_getSamples(SEXP gsPtr) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_getSamples(cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<GatingSet>>>(gsPtr)));
  END_CPP11
}
// R_GatingSet.cpp
cpp11::external_pointer<GatingSet> cpp_NewGatingSet(cpp11::external_pointer<GatingSet> gsPtr, string src_sample_uid, cpp11::external_pointer<GatingSet> cs, bool execute, string comp_source);
extern "C" SEXP _flowWorkspace_cpp_NewGatingSet(SEXP gsPtr, SEXP src_sample_uid, SEXP cs, SEXP execute, SEXP comp_source) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_NewGatingSet(cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<GatingSet>>>(gsPtr), cpp11::as_cpp<cpp11::decay_t<string>>(src_sample_uid), cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<GatingSet>>>(cs), cpp11::as_cpp<cpp11::decay_t<bool>>(execute), cpp11::as_cpp<cpp11::decay_t<string>>(comp_source)));
  END_CPP11
}
// R_GatingSet.cpp
string get_gatingset_id(cpp11::external_pointer<GatingSet> gsPtr);
extern "C" SEXP _flowWorkspace_get_gatingset_id(SEXP gsPtr) {
  BEGIN_CPP11
    return cpp11::as_sexp(get_gatingset_id(cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<GatingSet>>>(gsPtr)));
  END_CPP11
}
// R_GatingSet.cpp
void set_gatingset_id(cpp11::external_pointer<GatingSet> gsPtr, string id);
extern "C" SEXP _flowWorkspace_set_gatingset_id(SEXP gsPtr, SEXP id) {
  BEGIN_CPP11
    set_gatingset_id(cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<GatingSet>>>(gsPtr), cpp11::as_cpp<cpp11::decay_t<string>>(id));
    return R_NilValue;
  END_CPP11
}
// R_GatingSet.cpp
void cpp_saveGatingSet(cpp11::external_pointer<GatingSet> gs, string path, string backend_opt);
extern "C" SEXP _flowWorkspace_cpp_saveGatingSet(SEXP gs, SEXP path, SEXP backend_opt) {
  BEGIN_CPP11
    cpp_saveGatingSet(cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<GatingSet>>>(gs), cpp11::as_cpp<cpp11::decay_t<string>>(path), cpp11::as_cpp<cpp11::decay_t<string>>(backend_opt));
    return R_NilValue;
  END_CPP11
}
// R_GatingSet.cpp
cpp11::external_pointer<GatingSet> cpp_loadGatingSet(string path, bool readonly, vector<string> select_samples, bool verbose);
extern "C" SEXP _flowWorkspace_cpp_loadGatingSet(SEXP path, SEXP readonly, SEXP select_samples, SEXP verbose) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_loadGatingSet(cpp11::as_cpp<cpp11::decay_t<string>>(path), cpp11::as_cpp<cpp11::decay_t<bool>>(readonly), cpp11::as_cpp<cpp11::decay_t<vector<string>>>(select_samples), cpp11::as_cpp<cpp11::decay_t<bool>>(verbose)));
  END_CPP11
}
// R_GatingSet.cpp
cpp11::external_pointer<GatingSet> load_legacy_gs(string pbfile, cpp11::external_pointer<GatingSet> cs);
extern "C" SEXP _flowWorkspace_load_legacy_gs(SEXP pbfile, SEXP cs) {
  BEGIN_CPP11
    return cpp11::as_sexp(load_legacy_gs(cpp11::as_cpp<cpp11::decay_t<string>>(pbfile), cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<GatingSet>>>(cs)));
  END_CPP11
}
// R_GatingSet.cpp
cpp11::external_pointer<GatingSet> cpp_CloneGatingSet(cpp11::external_pointer<GatingSet> gs, string h5_dir, bool is_copy_data);
extern "C" SEXP _flowWorkspace_cpp_CloneGatingSet(SEXP gs, SEXP h5_dir, SEXP is_copy_data) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_CloneGatingSet(cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<GatingSet>>>(gs), cpp11::as_cpp<cpp11::decay_t<string>>(h5_dir), cpp11::as_cpp<cpp11::decay_t<bool>>(is_copy_data)));
  END_CPP11
}
// R_GatingSet.cpp
cpp11::external_pointer<GatingSet> cpp_combineGatingSet(cpp11::list gsList, cpp11::list sampleList);
extern "C" SEXP _flowWorkspace_cpp_combineGatingSet(SEXP gsList, SEXP sampleList) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_combineGatingSet(cpp11::as_cpp<cpp11::decay_t<cpp11::list>>(gsList), cpp11::as_cpp<cpp11::decay_t<cpp11::list>>(sampleList)));
  END_CPP11
}
// R_GatingSet.cpp
void cpp_setSample(cpp11::external_pointer<GatingSet> gs, string oldName, string newName);
extern "C" SEXP _flowWorkspace_cpp_setSample(SEXP gs, SEXP oldName, SEXP newName) {
  BEGIN_CPP11
    cpp_setSample(cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<GatingSet>>>(gs), cpp11::as_cpp<cpp11::decay_t<string>>(oldName), cpp11::as_cpp<cpp11::decay_t<string>>(newName));
    return R_NilValue;
  END_CPP11
}
// R_GatingSet.cpp
bool is_tiledb_support();
extern "C" SEXP _flowWorkspace_is_tiledb_support() {
  BEGIN_CPP11
    return cpp11::as_sexp(is_tiledb_support());
  END_CPP11
}
// R_GatingSet.cpp
unsigned short cpp_getLogLevel();
extern "C" SEXP _flowWorkspace_cpp_getLogLevel() {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_getLogLevel());
  END_CPP11
}
// R_GatingSet.cpp
void cpp_setLogLevel(unsigned short loglevel);
extern "C" SEXP _flowWorkspace_cpp_setLogLevel(SEXP loglevel) {
  BEGIN_CPP11
    cpp_setLogLevel(cpp11::as_cpp<cpp11::decay_t<unsigned short>>(loglevel));
    return R_NilValue;
  END_CPP11
}
// R_GatingSet.cpp
void cpp_togleErrorFlag();
extern "C" SEXP _flowWorkspace_cpp_togleErrorFlag() {
  BEGIN_CPP11
    cpp_togleErrorFlag();
    return R_NilValue;
  END_CPP11
}
// setCounts.cpp
void setCounts_cpp(cpp11::external_pointer<GatingSet> gsPtr, string sampleName, string node, int count);
extern "C" SEXP _flowWorkspace_setCounts_cpp(SEXP gsPtr, SEXP sampleName, SEXP node, SEXP count) {
  BEGIN_CPP11
    setCounts_cpp(cpp11::as_cpp<cpp11::decay_t<cpp11::external_pointer<GatingSet>>>(gsPtr), cpp11::as_cpp<cpp11::decay_t<string>>(sampleName), cpp11::as_cpp<cpp11::decay_t<string>>(node), cpp11::as_cpp<cpp11::decay_t<int>>(count));
    return R_NilValue;
  END_CPP11
}

extern "C" {
static const R_CallMethodDef CallEntries[] = {
    {"_flowWorkspace_add_cytoframe",                     (DL_FUNC) &_flowWorkspace_add_cytoframe,                     3},
    {"_flowWorkspace_append_cols",                       (DL_FUNC) &_flowWorkspace_append_cols,                       3},
    {"_flowWorkspace_backend_type",                      (DL_FUNC) &_flowWorkspace_backend_type,                      1},
    {"_flowWorkspace_cf_flush_meta_cpp",                 (DL_FUNC) &_flowWorkspace_cf_flush_meta_cpp,                 1},
    {"_flowWorkspace_cf_getData",                        (DL_FUNC) &_flowWorkspace_cf_getData,                        1},
    {"_flowWorkspace_cf_getKeyword",                     (DL_FUNC) &_flowWorkspace_cf_getKeyword,                     2},
    {"_flowWorkspace_cf_getKeywords",                    (DL_FUNC) &_flowWorkspace_cf_getKeywords,                    1},
    {"_flowWorkspace_cf_is_indexed",                     (DL_FUNC) &_flowWorkspace_cf_is_indexed,                     1},
    {"_flowWorkspace_cf_load_meta_cpp",                  (DL_FUNC) &_flowWorkspace_cf_load_meta_cpp,                  1},
    {"_flowWorkspace_cf_removeKeywords",                 (DL_FUNC) &_flowWorkspace_cf_removeKeywords,                 2},
    {"_flowWorkspace_cf_renameKeywords",                 (DL_FUNC) &_flowWorkspace_cf_renameKeywords,                 3},
    {"_flowWorkspace_cf_scale_time_channel_cpp",         (DL_FUNC) &_flowWorkspace_cf_scale_time_channel_cpp,         1},
    {"_flowWorkspace_cf_setData",                        (DL_FUNC) &_flowWorkspace_cf_setData,                        2},
    {"_flowWorkspace_cf_setKeywords",                    (DL_FUNC) &_flowWorkspace_cf_setKeywords,                    2},
    {"_flowWorkspace_cf_setKeywordsSubset",              (DL_FUNC) &_flowWorkspace_cf_setKeywordsSubset,              3},
    {"_flowWorkspace_cf_set_readonly",                   (DL_FUNC) &_flowWorkspace_cf_set_readonly,                   2},
    {"_flowWorkspace_cf_to_memcf",                       (DL_FUNC) &_flowWorkspace_cf_to_memcf,                       1},
    {"_flowWorkspace_cf_transform_data",                 (DL_FUNC) &_flowWorkspace_cf_transform_data,                 2},
    {"_flowWorkspace_copy_view_cytoframe",               (DL_FUNC) &_flowWorkspace_copy_view_cytoframe,               1},
    {"_flowWorkspace_copy_view_cytoset",                 (DL_FUNC) &_flowWorkspace_copy_view_cytoset,                 1},
    {"_flowWorkspace_cpp_CloneGatingSet",                (DL_FUNC) &_flowWorkspace_cpp_CloneGatingSet,                3},
    {"_flowWorkspace_cpp_NewGatingSet",                  (DL_FUNC) &_flowWorkspace_cpp_NewGatingSet,                  5},
    {"_flowWorkspace_cpp_addGate",                       (DL_FUNC) &_flowWorkspace_cpp_addGate,                       5},
    {"_flowWorkspace_cpp_boolGating",                    (DL_FUNC) &_flowWorkspace_cpp_boolGating,                    4},
    {"_flowWorkspace_cpp_combineGatingSet",              (DL_FUNC) &_flowWorkspace_cpp_combineGatingSet,              2},
    {"_flowWorkspace_cpp_gating",                        (DL_FUNC) &_flowWorkspace_cpp_gating,                        5},
    {"_flowWorkspace_cpp_getChildren",                   (DL_FUNC) &_flowWorkspace_cpp_getChildren,                   4},
    {"_flowWorkspace_cpp_getCompensation",               (DL_FUNC) &_flowWorkspace_cpp_getCompensation,               2},
    {"_flowWorkspace_cpp_getGate",                       (DL_FUNC) &_flowWorkspace_cpp_getGate,                       3},
    {"_flowWorkspace_cpp_getGateFlag",                   (DL_FUNC) &_flowWorkspace_cpp_getGateFlag,                   3},
    {"_flowWorkspace_cpp_getHiddenFlag",                 (DL_FUNC) &_flowWorkspace_cpp_getHiddenFlag,                 3},
    {"_flowWorkspace_cpp_getIndices",                    (DL_FUNC) &_flowWorkspace_cpp_getIndices,                    3},
    {"_flowWorkspace_cpp_getLogLevel",                   (DL_FUNC) &_flowWorkspace_cpp_getLogLevel,                   0},
    {"_flowWorkspace_cpp_getNegateFlag",                 (DL_FUNC) &_flowWorkspace_cpp_getNegateFlag,                 3},
    {"_flowWorkspace_cpp_getNodeID",                     (DL_FUNC) &_flowWorkspace_cpp_getNodeID,                     3},
    {"_flowWorkspace_cpp_getNodes",                      (DL_FUNC) &_flowWorkspace_cpp_getNodes,                      5},
    {"_flowWorkspace_cpp_getParent",                     (DL_FUNC) &_flowWorkspace_cpp_getParent,                     3},
    {"_flowWorkspace_cpp_getPopStats",                   (DL_FUNC) &_flowWorkspace_cpp_getPopStats,                   3},
    {"_flowWorkspace_cpp_getSamples",                    (DL_FUNC) &_flowWorkspace_cpp_getSamples,                    1},
    {"_flowWorkspace_cpp_getSingleCellExpression",       (DL_FUNC) &_flowWorkspace_cpp_getSingleCellExpression,       6},
    {"_flowWorkspace_cpp_getSingleCellExpressionByGate", (DL_FUNC) &_flowWorkspace_cpp_getSingleCellExpressionByGate, 6},
    {"_flowWorkspace_cpp_getTransformations",            (DL_FUNC) &_flowWorkspace_cpp_getTransformations,            3},
    {"_flowWorkspace_cpp_loadGatingSet",                 (DL_FUNC) &_flowWorkspace_cpp_loadGatingSet,                 4},
    {"_flowWorkspace_cpp_plotGh",                        (DL_FUNC) &_flowWorkspace_cpp_plotGh,                        3},
    {"_flowWorkspace_cpp_removeNode",                    (DL_FUNC) &_flowWorkspace_cpp_removeNode,                    4},
    {"_flowWorkspace_cpp_saveGatingSet",                 (DL_FUNC) &_flowWorkspace_cpp_saveGatingSet,                 3},
    {"_flowWorkspace_cpp_setGate",                       (DL_FUNC) &_flowWorkspace_cpp_setGate,                       4},
    {"_flowWorkspace_cpp_setIndices",                    (DL_FUNC) &_flowWorkspace_cpp_setIndices,                    4},
    {"_flowWorkspace_cpp_setLogLevel",                   (DL_FUNC) &_flowWorkspace_cpp_setLogLevel,                   1},
    {"_flowWorkspace_cpp_setSample",                     (DL_FUNC) &_flowWorkspace_cpp_setSample,                     3},
    {"_flowWorkspace_cpp_togleErrorFlag",                (DL_FUNC) &_flowWorkspace_cpp_togleErrorFlag,                0},
    {"_flowWorkspace_cs_set_compensation",               (DL_FUNC) &_flowWorkspace_cs_set_compensation,               3},
    {"_flowWorkspace_del_rownames",                      (DL_FUNC) &_flowWorkspace_del_rownames,                      1},
    {"_flowWorkspace_fcs_to_cytoset",                    (DL_FUNC) &_flowWorkspace_fcs_to_cytoset,                    4},
    {"_flowWorkspace_frm_compensate",                    (DL_FUNC) &_flowWorkspace_frm_compensate,                    2},
    {"_flowWorkspace_gen_uid",                           (DL_FUNC) &_flowWorkspace_gen_uid,                           0},
    {"_flowWorkspace_getDescendants_cpp",                (DL_FUNC) &_flowWorkspace_getDescendants_cpp,                3},
    {"_flowWorkspace_getNodePath",                       (DL_FUNC) &_flowWorkspace_getNodePath,                       3},
    {"_flowWorkspace_getPopCounts_cpp",                  (DL_FUNC) &_flowWorkspace_getPopCounts_cpp,                  5},
    {"_flowWorkspace_getSplineCoefs",                    (DL_FUNC) &_flowWorkspace_getSplineCoefs,                    6},
    {"_flowWorkspace_get_channels",                      (DL_FUNC) &_flowWorkspace_get_channels,                      1},
    {"_flowWorkspace_get_colnames",                      (DL_FUNC) &_flowWorkspace_get_colnames,                      1},
    {"_flowWorkspace_get_cytoframe",                     (DL_FUNC) &_flowWorkspace_get_cytoframe,                     3},
    {"_flowWorkspace_get_cytoset",                       (DL_FUNC) &_flowWorkspace_get_cytoset,                       1},
    {"_flowWorkspace_get_cytoset_from_node",             (DL_FUNC) &_flowWorkspace_get_cytoset_from_node,             2},
    {"_flowWorkspace_get_gatingset_id",                  (DL_FUNC) &_flowWorkspace_get_gatingset_id,                  1},
    {"_flowWorkspace_get_pheno_data",                    (DL_FUNC) &_flowWorkspace_get_pheno_data,                    1},
    {"_flowWorkspace_get_rownames",                      (DL_FUNC) &_flowWorkspace_get_rownames,                      1},
    {"_flowWorkspace_get_uri",                           (DL_FUNC) &_flowWorkspace_get_uri,                           1},
    {"_flowWorkspace_getncol",                           (DL_FUNC) &_flowWorkspace_getncol,                           1},
    {"_flowWorkspace_getnrow",                           (DL_FUNC) &_flowWorkspace_getnrow,                           1},
    {"_flowWorkspace_getpdata",                          (DL_FUNC) &_flowWorkspace_getpdata,                          1},
    {"_flowWorkspace_gs_transform_data",                 (DL_FUNC) &_flowWorkspace_gs_transform_data,                 1},
    {"_flowWorkspace_h5_set_error_handler",              (DL_FUNC) &_flowWorkspace_h5_set_error_handler,              0},
    {"_flowWorkspace_is_tiledb_support",                 (DL_FUNC) &_flowWorkspace_is_tiledb_support,                 0},
    {"_flowWorkspace_load_cf",                           (DL_FUNC) &_flowWorkspace_load_cf,                           3},
    {"_flowWorkspace_load_legacy_gs",                    (DL_FUNC) &_flowWorkspace_load_legacy_gs,                    2},
    {"_flowWorkspace_moveNode",                          (DL_FUNC) &_flowWorkspace_moveNode,                          4},
    {"_flowWorkspace_new_cytoset",                       (DL_FUNC) &_flowWorkspace_new_cytoset,                       0},
    {"_flowWorkspace_parseFCS",                          (DL_FUNC) &_flowWorkspace_parseFCS,                          5},
    {"_flowWorkspace_realize_view_cytoframe",            (DL_FUNC) &_flowWorkspace_realize_view_cytoframe,            2},
    {"_flowWorkspace_realize_view_cytoset",              (DL_FUNC) &_flowWorkspace_realize_view_cytoset,              2},
    {"_flowWorkspace_setChannel",                        (DL_FUNC) &_flowWorkspace_setChannel,                        3},
    {"_flowWorkspace_setCounts_cpp",                     (DL_FUNC) &_flowWorkspace_setCounts_cpp,                     4},
    {"_flowWorkspace_setMarker",                         (DL_FUNC) &_flowWorkspace_setMarker,                         3},
    {"_flowWorkspace_setNodeFlag",                       (DL_FUNC) &_flowWorkspace_setNodeFlag,                       4},
    {"_flowWorkspace_setNodeName",                       (DL_FUNC) &_flowWorkspace_setNodeName,                       4},
    {"_flowWorkspace_set_all_channels",                  (DL_FUNC) &_flowWorkspace_set_all_channels,                  2},
    {"_flowWorkspace_set_cytoframe",                     (DL_FUNC) &_flowWorkspace_set_cytoframe,                     3},
    {"_flowWorkspace_set_cytoset",                       (DL_FUNC) &_flowWorkspace_set_cytoset,                       2},
    {"_flowWorkspace_set_gatingset_id",                  (DL_FUNC) &_flowWorkspace_set_gatingset_id,                  2},
    {"_flowWorkspace_set_pheno_data",                    (DL_FUNC) &_flowWorkspace_set_pheno_data,                    2},
    {"_flowWorkspace_set_quadgate",                      (DL_FUNC) &_flowWorkspace_set_quadgate,                      4},
    {"_flowWorkspace_set_rownames",                      (DL_FUNC) &_flowWorkspace_set_rownames,                      2},
    {"_flowWorkspace_set_transformations",               (DL_FUNC) &_flowWorkspace_set_transformations,               3},
    {"_flowWorkspace_setpdata",                          (DL_FUNC) &_flowWorkspace_setpdata,                          2},
    {"_flowWorkspace_subset_cytoframe_by_cols",          (DL_FUNC) &_flowWorkspace_subset_cytoframe_by_cols,          2},
    {"_flowWorkspace_subset_cytoframe_by_rows",          (DL_FUNC) &_flowWorkspace_subset_cytoframe_by_rows,          2},
    {"_flowWorkspace_subset_cytoset",                    (DL_FUNC) &_flowWorkspace_subset_cytoset,                    3},
    {"_flowWorkspace_subset_cytoset_by_rows",            (DL_FUNC) &_flowWorkspace_subset_cytoset_by_rows,            3},
    {"_flowWorkspace_subset_gs_by_sample",               (DL_FUNC) &_flowWorkspace_subset_gs_by_sample,               2},
    {"_flowWorkspace_updateChannels_cpp",                (DL_FUNC) &_flowWorkspace_updateChannels_cpp,                2},
    {"_flowWorkspace_write_to_disk",                     (DL_FUNC) &_flowWorkspace_write_to_disk,                     3},
    {NULL, NULL, 0}
};
}

extern "C" attribute_visible void R_init_flowWorkspace(DllInfo* dll){
  R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
  R_useDynamicSymbols(dll, FALSE);
  R_forceSymbols(dll, TRUE);
}
